set -o vi

DIR_PREFIX=""

if [ -f /etc/bashrc ]; then
  . /etc/bashrc
fi

if [ -f ~/git-prompt.sh ]; then
  source ~/git-prompt.sh
fi

function prompt_command() {
  export PS1='$(__git_ps1) \w [\u]\$ '
}

export PROMPT_COMMAND=prompt_command
# export PATH=/usr/local/opt/llvm/bin:$PATH
# export PATH=$PATH:`llvm-config --bindir`
# export LDFLAGS="-L/usr/local/opt/llvm/lib"
# export CPPFLAGS="-I/usr/local/opt/llvm/include"

if [ -f $DIR_PREFIX/etc/bash_completion ]; then
  source $DIR_PREFIX/etc/bash_completion
fi

export LC_ALL=en_US.UTF-8

if [ -d $HOME/bin ]; then
  export PATH=$PATH:$HOME/bin
fi

if [ -d $HOME/.local/bin ]; then
  export PATH=$PATH:$HOME/.local/bin
fi

if [ -d $HOME/Library/Python/3.7/bin ]; then
    export PATH=$PATH:$HOME/Library/Python/3.7/bin
fi

if [ -d /usr/local/opt/postgresql@10/bin ]; then
  export PATH=$PATH:/usr/local/opt/postgresql@10/bin
fi

[ -f ~/.fzf.bash ] && source ~/.fzf.bash

if command -v rg >/dev/null && command -v fzf >/dev/null; then
  export FZF_DEFAULT_COMMAND='rg --files --no-ignore-vcs --hidden'
fi

if [ -f ~/.ghcup/env ]; then
  source ~/.ghcup/env
fi

# Aliases
if command -v nvim >/dev/null; then
  alias vim=nvim
fi

alias dcps="docker-compose ps"

if [ -f $HOME/.nuget/packages/nunit.consolerunner/3.11.1/tools/nunit3-console.exe ]; then
  alias nunit3-console="mono $HOME/.nuget/packages/nunit.consolerunner/3.11.1/tools/nunit3-console.exe"
fi

function prompt_command() {
  export PS1='$(__git_ps1) \w [\u]\$ '
}

function dps() {
  if command -v docker-pretty-ps>/dev/null; then
    cmd="docker-pretty-ps"
  else
    cmd="docker ps"
  fi

  eval "$cmd"
}

function mcd() {
  mkdir $1 && cd $1;
}

complete -C /usr/local/Cellar/terraform/0.11.9/bin/terraform terraform

complete -C /usr/local/bin/terraform terraform

# fzf bash history
bind '"\C-r": "\C-x1\e^\er"'
bind -x '"\C-x1": __fzf_history';

__fzf_history () {
  __ehc $(history | fzf --tac --tiebreak=index | perl -ne 'm/^\s*([0-9]+)/ and print "!$1"')
}

__ehc() {
  if [[ -n $1 ]]; then
    bind '"\er": redraw-current-line'
    bind '"\e^": magic-space'
    READLINE_LINE=${READLINE_LINE:+${READLINE_LINE:0:READLINE_POINT}}${1}${READLINE_LINE:+${READLINE_LINE:READLINE_POINT}}
    READLINE_POINT=$(( READLINE_POINT + ${#1} ))
  else
    bind '"\er":'
    bind '"\e^":'
  fi
}
