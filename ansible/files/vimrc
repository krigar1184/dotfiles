let $NVIM_COC_LOG_LEVEL='debug'
let $NVIM_COC_LOG_FILE='/var/tmp/coc-nvim.log'

call plug#begin()
Plug 'mbbill/undotree'
Plug 'sheerun/vim-polyglot'
Plug 'tpope/vim-commentary'
Plug 'Shougo/echodoc.vim'
Plug 'scrooloose/nerdtree'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'neoclide/coc.nvim', { 'branch': 'release' }
Plug 'fannheyward/coc-pyright'
Plug 'neoclide/coc-json'
Plug 'neoclide/coc-tsserver'
Plug 'iamcco/coc-actions'
Plug 'joenye/coc-cfn-lint'
Plug 'clangd/coc-clangd'
Plug 'pappasam/coc-jedi'
Plug 'voldikss/coc-cmake'
Plug 'neoclide/coc-css'
Plug 'neoclide/coc-eslint'
Plug 'weirongxu/coc-explorer'
Plug 'neoclide/coc-git'
Plug 'neoclide/coc-html'
Plug 'neoclide/coc-json'
Plug 'fannheyward/coc-markdownlint'
Plug 'neoclide/coc-rls'
Plug 'fannheyward/coc-rust-analyzer'
Plug 'josa42/coc-sh'
Plug 'voldikss/coc-template'
Plug 'iamcco/coc-vimlsp'
Plug 'fannheyward/coc-xml'
Plug 'neoclide/coc-yaml'
Plug 'nanotech/jellybeans.vim'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': 'install --all' }
Plug 'junegunn/fzf.vim'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'
Plug 'liuchengxu/vista.vim'
call plug#end()

set nobackup
set nowritebackup
set hidden
set autoread
set autowrite
set clipboard+=unnamedplus
set expandtab
set hlsearch
set incsearch
set laststatus=2
set lazyredraw
set listchars+=precedes:<,extends:>
set nocompatible
set nowrap
set number
set shiftwidth=2
set shiftround
set sidescroll=5
set signcolumn=yes
set smartindent
set softtabstop=4
set tabstop=4
set t_Co=256
set textwidth=0
set tildeop
set wildmenu
set winfixwidth
set winfixheight
if has('persistent_undo')
    set undofile
endif
set statusline=%f  " filename
set statusline+=%=  " align right
set statusline+=%y  " filetype
set statusline+=%m  " modified?
set updatetime=300

:filetype on
:filetype plugin on

let g:loaded_python_provider = 1  " Disabling python 2 due to a weird error
let g:python3_host_prog=expand('~/.config/pynvim3/bin/python')

function! ToggleExplorer()
  CocCommand explorer --preset normal
endfunction

autocmd vimenter * call ToggleExplorer()
nnoremap <leader>tn call ToggleExplorer()
nnoremap <leader>u :UndotreeToggle<cr>

let mapleader=","

nnoremap <leader>sv :source $MYVIMRC<cr>
nnoremap <leader>ev :vsplit $MYVIMRC<cr>
nnoremap <leader>et :vsplit ~/.tmux.conf<cr>
nnoremap <leader>st :!tmux source-file ~/.tmux.conf<cr>

nnoremap <c-h> <c-w>h
nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k
nnoremap <c-l> <c-w>l

nnoremap <leader>lo :lopen<cr>
nnoremap <leader>lc :lclose<cr>

nnoremap H ^
nnoremap L $
onoremap p i(

augroup filetype_python
  autocmd FileType python nnoremap <leader>d obreakpoint()<esc>
  autocmd FileType python nnoremap <leader>D Obreakpoint()<esc>
augroup END

augroup filetype_javascript
  autocmd FileType javascript nnoremap <leader>d odebugger;<esc>
  autocmd FileType javascript nnoremap <leader>D Odebugger;<esc>
augroup END

" Colorscheme
set background = "dark"
let g:solarized_termcolors = 256
silent! colorscheme jellybeans

augroup filetype_rust
    autocmd!
    autocmd BufReadPost *.rs setlocal filetype=rust
augroup END

" Airline
let g:airline_theme = 'jellybeans'
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#branch#enabled = 1
let g:airline#extensions#tabgar#enabled = 1

let g:airline#extensions#tagbar#flags = 's'
let g:airline#extensions#tmuxline#enabled = 1
let g:airline#extensions#nerdtree#enabled = 1
let g:airline#extensions#ale#enabled = 1
let g:airlint#init#vim_async = 1
let g:airline_powerline_fonts = 1
let g:airline_left_sep = "\ue0b0"

" FZF
let g:fzf_buffers_jump = 1
nnoremap <c-f> :History<cr>
nnoremap <c-p> :Files<cr>
nnoremap <c-g> :Rg<cr>
nnoremap <c-b> :Buffers<cr>

" Coc
let g:coc_global_extensions = [
      \'coc-json',
      \'coc-git',
      \'coc-yaml',
\]
function! s:check_backspace() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1] =~ '\s'
endfunction

inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<cr>"
inoremap <silent><expr> <Tab> pumvisible()
      \ ? "\<C-n>"
      \ : <sid>check_backspace() ? "\<Tab>" : coc#refresh()

nnoremap <leader>d <Plug>(coc-diagnostic-info)
nnoremap <silent>gd :call CocAction('jumpDefinition')<cr>
nnoremap <silent>K :call CocAction('doHover')<cr>
nnoremap <leader>gy <Plug>(coc-type-definition)
nnoremap <leader>gr <Plug>(coc-references)
