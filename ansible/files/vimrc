let $NVIM_COC_LOG_LEVEL='debug'
let $NVIM_COC_LOG_FILE='/var/tmp/coc-nvim.log'

call plug#begin()
Plug 'mbbill/undotree'
Plug 'sheerun/vim-polyglot'
Plug 'tpope/vim-commentary'
Plug 'Shougo/echodoc.vim'
Plug 'scrooloose/nerdtree'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'neoclide/coc.nvim', { 'branch': 'release' }
Plug 'fannheyward/coc-pyright'
Plug 'neoclide/coc-json'
Plug 'neoclide/coc-tsserver'
Plug 'iamcco/coc-actions'
Plug 'joenye/coc-cfn-lint'
Plug 'clangd/coc-clangd'
Plug 'pappasam/coc-jedi'
Plug 'voldikss/coc-cmake'
Plug 'neoclide/coc-css'
Plug 'neoclide/coc-eslint'
Plug 'weirongxu/coc-explorer'
Plug 'neoclide/coc-git'
Plug 'neoclide/coc-html'
Plug 'neoclide/coc-json'
Plug 'fannheyward/coc-markdownlint'
Plug 'neoclide/coc-rls'
Plug 'fannheyward/coc-rust-analyzer'
Plug 'josa42/coc-sh'
Plug 'voldikss/coc-template'
Plug 'iamcco/coc-vimlsp'
Plug 'fannheyward/coc-xml'
Plug 'neoclide/coc-yaml'
Plug 'nanotech/jellybeans.vim'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': 'install --all' }
Plug 'junegunn/fzf.vim'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'
Plug 'liuchengxu/vista.vim'
Plug 'rust-lang/rust.vim', {'for': 'rust'}
Plug 'ron-rs/ron.vim', {'for': 'rust'}
Plug 'sheerun/vim-polyglot'
call plug#end()

set nobackup
set nowritebackup
set hidden
set autoread
set autowrite
set clipboard+=unnamedplus
set expandtab
set hlsearch
set incsearch
set laststatus=2
set lazyredraw
set listchars+=precedes:<,extends:>
set nocompatible
set nowrap
set number
set shiftwidth=2
set shiftround
set sidescroll=5
set signcolumn=yes
set smartindent
set softtabstop=4
set tabstop=4
set t_Co=256
set textwidth=0
set tildeop
set wildmenu
set winfixwidth
set winfixheight
if has('persistent_undo')
    set undofile
endif
set statusline=%f  " filename
set statusline+=%=  " align right
set statusline+=%y  " filetype
set statusline+=%m  " modified?
set updatetime=300

:filetype on
:filetype plugin on

let g:loaded_python_provider = 1  " Disabling python 2 due to a weird error
let g:python3_host_prog=expand('~/.config/pynvim3/bin/python')

function! ToggleExplorer()
  CocCommand explorer --preset normal
endfunction

autocmd vimenter * call ToggleExplorer()
nnoremap <leader>tn call ToggleExplorer()
nnoremap <leader>u :UndotreeToggle<cr>

let mapleader=","

nnoremap <leader>sv :source $MYVIMRC<cr>
nnoremap <leader>ev :vsplit $MYVIMRC<cr>
nnoremap <leader>et :vsplit ~/.tmux.conf<cr>
nnoremap <leader>st :!tmux source-file ~/.tmux.conf<cr>

nnoremap <c-h> <c-w>h
nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k
nnoremap <c-l> <c-w>l

nnoremap <leader>lo :lopen<cr>
nnoremap <leader>lc :lclose<cr>

nnoremap H ^
nnoremap L $
onoremap p i(

augroup filetype_python
  autocmd FileType python nnoremap <leader>d obreakpoint()<esc>
  autocmd FileType python nnoremap <leader>D Obreakpoint()<esc>
augroup END

augroup filetype_javascript
  autocmd!
  autocmd FileType javascript nnoremap <leader>d odebugger;<esc>
  autocmd FileType javascript nnoremap <leader>D Odebugger;<esc>
augroup END

" Colorscheme
set background = "dark"
let g:solarized_termcolors = 256
silent! colorscheme jellybeans

" Tagbar
nnoremap <c-t> :TagbarToggle<cr>
let g:tagbar_autofocus = 1
let g:tagbar_sort = 1
let g:tagbar_show_visibility = 1
let g:tagbar_show_linenumbers = 1
let g:autoshowtag = 1
let g:tagbar_type_typescript = {                                                  
  \ 'ctagsbin' : 'tstags',                                                        
  \ 'ctagsargs' : '-f-',                                                           
  \ 'kinds': [                                                                     
    \ 'e:enums:0:1',                                                               
    \ 'f:function:0:1',                                                            
    \ 't:typealias:0:1',                                                           
    \ 'M:Module:0:1',                                                              
    \ 'I:import:0:1',                                                              
    \ 'i:interface:0:1',                                                           
    \ 'C:class:0:1',                                                               
    \ 'm:method:0:1',                                                              
    \ 'p:property:0:1',                                                            
    \ 'v:variable:0:1',                                                            
    \ 'c:const:0:1',                                                              
  \ ],                                                                            
  \ 'sort' : 0                                                                    
\ }             

" Fugitive
nnoremap <leader>gb :Gblame<cr>
nnoremap <leader>gs :Gstatus<cr>
nnoremap <leader>gg :Ggrep<cr>
nnoremap <leader>gl :Glog<cr>

  " LSP
let g:LanguageClient_serverCommands = {
  \ 'python': ['python', '-m', 'pyls'],
  \ 'javascript': ['node', '~/.local/bin/js-language-server'],
  \ 'typescript': ['node', '~/.local/bin/js-language-server'],
  \ 'typescript.tsx': ['node', '~/.local/bin/js-language-server'],
  \ 'typescriptreact': ['node', '~/.local/bin/js-language-server'],
  \ 'rust': ['rustup', 'run', 'nightly-2019-02-08', 'rls'],
  \ 'dockerfile': ['hadolint'],
  \ 'haskell': ['hie-wrapper'],
  \ 'elixir': ['elixir-ls'],
\ }
let g:LanguageClient_settingsPath = expand('~/.local/share/nvim/settings.json')
let g:LanguageClient_rootMarkers = {
  \ 'elixir': ['mix.lock', 'mix.exs'],
  \ 'javascript': ['lerna.json', 'package.json'],
  \ 'typescript': ['lerna.json', 'tsconfig.json'],
\ }

nnoremap <silent> <F4> :LanguageClient_contextMenu()<cr>
nnoremap <silent> K :call LanguageClient#textDocument_hover()<cr>
nnoremap <silent> gd :call LanguageClient#textDocument_definition()<cr>
nnoremap <silent> <F2> :call LanguageClient#textDocument_rename()<cr>
nnoremap <silent> <leader>fu :LanguageClient#findLocations()<cr>

let g:deoplete#enable_at_startup = 1

function! LC_log()
   :e expand('~/.local/share/nvim/LanguageClient.log')
endfunction

function! LC_stderr()
    :e expand('~/.local/share/nvim/LanguageServer.log')
endfunction

let $RUST_BACKTRACE=1
let g:LanguageClient_autoStart = 1
let g:LanguageClient_autoStop = 1
let g:LanguageClient_loggingLevel = 'DEBUG'
let g:LanguageClient_loggingFile = expand('~/.local/share/nvim/LanguageClient.log')
let g:LanguageClient_serverStderr = expand('~/.local/share/nvim/LanguageServer.log')
let g:LanguageClient_selectionUI = 'fzf'
let g:LanguageClient_diagnosticsEnable = 1
let g:LanguageClient_diagnosticsList = 'Location'
let g:LanguageClient_diagnosticsSignsMax = 5
let g:LanguageClient_windowLogMessageLevel = 'Error'
let g:LanguageClient_fzfContextMenu = 1
let g:LanguageClient_hoverPreview = 'Auto'

augroup filetype_rust
    autocmd!
    autocmd BufReadPost *.rs setlocal filetype=rust
augroup END

" Ale
 let g:ale_linters = {
     \'python': ['pyls', 'mypy', 'flake8', 'pycodestyle'],
     \'rust': ['cargo', 'rls', 'racer'],
     \'bash': ['shell'],
     \'dockerfile': ['hadolint'],
     \'vim': ['vint'],
     \'clojure': ['joker'],
     \'JSON': ['jsonlint'],
     \'SQL': ['sqlint'],
     \'XML': ['xmllint'],
 \}
 let g:ale_fixers = [
     \'remove_trailing_lines',
     \'trim_whitespace',
     \'rustfmt',
     \'isort',
 \]
 
 let g:ale_enabled = 1
 let g:ale_fix_on_save = 1
 let g:ale_lint_on_save = 1
 let g:ale_lint_on_text_changed = 0
 let g:ale_lint_on_enter = 0
 let g:ale_lint_on_filetype_changed = 1
 let g:ale_open_list = 0
 let g:ale_list_window_size = 3
 let g:ale_warn_about_trailing_blank_lines = 1
 let g:ale_warn_about_trailing_whitespace = 1
 let g:ale_set_highlights = 1
 let g:ale_set_loclist = 0
 let g:ale_set_quickfix = 0
 let g:ale_list_window_vertical = 0
 let g:ale_linters_explicit = 1
 let g:ale_sign_column_always = 1
 let g:ale_virtualtext_cursor = 1
 let g:ale_set_balloons = 1

 autocmd User ALELintPost call s:ale_loclist_limit()  " see https://github.com/w0rp/ale/issues/1164

function! s:ale_loclist_limit()
    if exists("b:ale_list_window_size_max")
        let b:ale_list_window_size = min([len(ale#engine#GetLoclist(bufnr('%'))), b:ale_window_size_max])
    elseif exists("g:ale_list_window_size_max")
        let b:ale_list_window_size = min([len(ale#engine#GetLoclist(bufnr('%'))), g:ale_list_window_size])
    endif
endfunction

" Signify
let g:signify_vcs_list = ['git']
let g:signify_realtime = 1

" Gundo
let g:gundo_prefer_python3 = 1

" Airline
let g:airline_theme = 'jellybeans'
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#branch#enabled = 1
let g:airline#extensions#tabgar#enabled = 1

let g:airline#extensions#tagbar#flags = 's'
let g:airline#extensions#tmuxline#enabled = 1
let g:airline#extensions#nerdtree#enabled = 1
let g:airline#extensions#ale#enabled = 1
let g:airlint#init#vim_async = 1
let g:airline_powerline_fonts = 1
let g:airline_left_sep = "\ue0b0"

" FZF
let g:fzf_buffers_jump = 1
nnoremap <c-f> :History<cr>
nnoremap <c-p> :Files<cr>
nnoremap <c-g> :Rg<cr>
nnoremap <c-b> :Buffers<cr>

" Coc
let g:coc_global_extensions = [
      \'coc-json',
      \'coc-git',
      \'coc-yaml',
\]
function! s:check_backspace() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1] =~ '\s'
endfunction

inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<cr>"
inoremap <silent><expr> <Tab> pumvisible()
      \ ? "\<C-n>"
      \ : <sid>check_backspace() ? "\<Tab>" : coc#refresh()

nnoremap <leader>d <Plug>(coc-diagnostic-info)
nnoremap <silent>gd :call CocAction('jumpDefinition')<cr>
nnoremap <silent>K :call CocAction('doHover')<cr>
nnoremap <leader>gy <Plug>(coc-type-definition)
nnoremap <leader>gr <Plug>(coc-references)
